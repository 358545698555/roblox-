if not game:IsLoaded() then
    game.Loaded:Wait()
end

local Players = game:GetService("Players")
local CoreGui = game:GetService("CoreGui")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")

local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

-- 清除旧UI
if CoreGui:FindFirstChild("AdvancedTranslatorUI") then
    CoreGui:FindFirstChild("AdvancedTranslatorUI"):Destroy()
end

-- 创建主UI
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "AdvancedTranslatorUI"
screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
screenGui.Parent = CoreGui

-- 彩色颜色序列
local rainbowColors = ColorSequence.new({
    ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 0)),
    ColorSequenceKeypoint.new(0.166, Color3.fromRGB(255, 165, 0)),
    ColorSequenceKeypoint.new(0.333, Color3.fromRGB(255, 255, 0)),
    ColorSequenceKeypoint.new(0.5, Color3.fromRGB(0, 255, 0)),
    ColorSequenceKeypoint.new(0.666, Color3.fromRGB(0, 0, 255)),
    ColorSequenceKeypoint.new(0.833, Color3.fromRGB(75, 0, 130)),
    ColorSequenceKeypoint.new(1, Color3.fromRGB(238, 130, 238))
})

-- 创建浮动控制按钮
local controlButton = Instance.new("TextButton")
controlButton.Name = "WU_ControlButton"
controlButton.Size = UDim2.new(0, 60, 0, 60)
controlButton.Position = UDim2.new(0, 20, 0, 20)
controlButton.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
controlButton.Text = "WU"
controlButton.TextColor3 = Color3.fromRGB(255, 255, 255)
controlButton.TextSize = 20
controlButton.Font = Enum.Font.GothamBold
controlButton.ZIndex = 1000
controlButton.Parent = screenGui

local controlCorner = Instance.new("UICorner")
controlCorner.CornerRadius = UDim.new(0, 30)
controlCorner.Parent = controlButton

-- 流动描边效果
local controlStroke = Instance.new("UIStroke")
controlStroke.Color = Color3.fromRGB(255, 255, 255)
controlStroke.Thickness = 1.5
controlStroke.Parent = controlButton

local rainbowGradient = Instance.new("UIGradient")
rainbowGradient.Color = rainbowColors
rainbowGradient.Rotation = 0
rainbowGradient.Parent = controlStroke

-- 流动动画
local rainbowTween = TweenService:Create(rainbowGradient, TweenInfo.new(4, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, -1), 
    {Rotation = 360})
rainbowTween:Play()

-- 创建主界面
local mainFrame = Instance.new("Frame")
mainFrame.Name = "MainFrame"
mainFrame.Size = UDim2.new(0, 400, 0, 350)
mainFrame.Position = UDim2.new(0, 90, 0, 20)
mainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 35)
mainFrame.BorderSizePixel = 0
mainFrame.Visible = false
mainFrame.ZIndex = 999
mainFrame.Parent = screenGui

local corner = Instance.new("UICorner")
corner.CornerRadius = UDim.new(0, 12)
corner.Parent = mainFrame

-- 主界面彩色边框
local frameStroke = Instance.new("UIStroke")
frameStroke.Color = Color3.fromRGB(255, 255, 255)
frameStroke.Thickness = 1.5
frameStroke.Parent = mainFrame

local frameRainbow = Instance.new("UIGradient")
frameRainbow.Color = rainbowColors
frameRainbow.Rotation = 0
frameRainbow.Parent = frameStroke

local frameRainbowTween = TweenService:Create(frameRainbow, TweenInfo.new(4, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, -1), 
    {Rotation = 360})
frameRainbowTween:Play()

-- 标题栏
local title = Instance.new("TextLabel")
title.Name = "Title"
title.Size = UDim2.new(1, 0, 0, 40)
title.Position = UDim2.new(0, 0, 0, 0)
title.BackgroundColor3 = Color3.fromRGB(40, 40, 45)
title.Text = "WU SCRIPT 界面汉化工具"
title.TextColor3 = Color3.fromRGB(255, 255, 255)
title.TextSize = 16
title.Font = Enum.Font.GothamBold
title.ZIndex = 1000
title.Parent = mainFrame

-- 标题彩色边框
local titleStroke = Instance.new("UIStroke")
titleStroke.Color = Color3.fromRGB(255, 255, 255)
titleStroke.Thickness = 1.5
titleStroke.Parent = title

local titleRainbow = Instance.new("UIGradient")
titleRainbow.Color = rainbowColors
titleRainbow.Rotation = 180
titleRainbow.Parent = titleStroke

local titleRainbowTween = TweenService:Create(titleRainbow, TweenInfo.new(4, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, -1), 
    {Rotation = 540})
titleRainbowTween:Play()

-- 翻译模式选择
local modeFrame = Instance.new("Frame")
modeFrame.Name = "ModeFrame"
modeFrame.Size = UDim2.new(0.8, 0, 0, 80)
modeFrame.Position = UDim2.new(0.1, 0, 0.15, 0)
modeFrame.BackgroundTransparency = 1
modeFrame.Parent = mainFrame

local modeLabel = Instance.new("TextLabel")
modeLabel.Name = "ModeLabel"
modeLabel.Size = UDim2.new(1, 0, 0, 20)
modeLabel.Position = UDim2.new(0, 0, 0, 0)
modeLabel.BackgroundTransparency = 1
modeLabel.Text = "翻译模式:"
modeLabel.TextColor3 = Color3.fromRGB(200, 200, 255)
modeLabel.TextSize = 12
modeLabel.Font = Enum.Font.Gotham
modeLabel.TextXAlignment = Enum.TextXAlignment.Left
modeLabel.Parent = modeFrame

-- 创建模式选择按钮
local modes = {
    {"快速模式", "快速替换", Color3.fromRGB(100, 200, 100)},
    {"自匹配模式", "上下文翻译", Color3.fromRGB(100, 150, 255)},
    {"完整模式", "完整翻译", Color3.fromRGB(200, 100, 255)}
}

local currentMode = 2 -- 默认自匹配模式
local modeButtons = {}

for i, modeData in ipairs(modes) do
    local button = Instance.new("TextButton")
    button.Name = "ModeButton_"..i
    button.Size = UDim2.new(0.3, -5, 0, 25)
    button.Position = UDim2.new((i-1)*0.33, 0, 0.3, 0)
    button.BackgroundColor3 = i == currentMode and modeData[3] or Color3.fromRGB(60, 60, 70)
    button.Text = modeData[1]
    button.TextColor3 = Color3.fromRGB(255, 255, 255)
    button.TextSize = 12
    button.Font = Enum.Font.Gotham
    button.Parent = modeFrame
    
    local buttonCorner = Instance.new("UICorner")
    buttonCorner.CornerRadius = UDim.new(0, 5)
    buttonCorner.Parent = button
    
    -- 添加彩色边框
    local buttonStroke = Instance.new("UIStroke")
    buttonStroke.Color = Color3.fromRGB(255, 255, 255)
    buttonStroke.Thickness = 1.5
    buttonStroke.Parent = button
    
    local buttonRainbow = Instance.new("UIGradient")
    buttonRainbow.Color = rainbowColors
    buttonRainbow.Rotation = i * 120
    buttonRainbow.Parent = buttonStroke
    
    local buttonRainbowTween = TweenService:Create(buttonRainbow, TweenInfo.new(4, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, -1), 
        {Rotation = i * 120 + 360})
    buttonRainbowTween:Play()
    
    button.MouseButton1Click:Connect(function()
        currentMode = i
        for j, btn in ipairs(modeButtons) do
            btn.BackgroundColor3 = j == currentMode and modes[j][3] or Color3.fromRGB(60, 60, 70)
        end
        statusText.Text = "模式切换: "..modeData[2]
    end)
    
    table.insert(modeButtons, button)
end

-- 控制按钮
local toggleButton = Instance.new("TextButton")
toggleButton.Name = "ToggleButton"
toggleButton.Size = UDim2.new(0.8, 0, 0, 40)
toggleButton.Position = UDim2.new(0.1, 0, 0.4, 0)
toggleButton.BackgroundColor3 = Color3.fromRGB(60, 60, 70)
toggleButton.Text = "执行翻译"
toggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
toggleButton.TextSize = 14
toggleButton.Font = Enum.Font.GothamBold
toggleButton.ZIndex = 1000
toggleButton.Parent = mainFrame

local toggleCorner = Instance.new("UICorner")
toggleCorner.CornerRadius = UDim.new(0, 8)
toggleCorner.Parent = toggleButton

-- 添加彩色边框
local toggleStroke = Instance.new("UIStroke")
toggleStroke.Color = Color3.fromRGB(255, 255, 255)
toggleStroke.Thickness = 1.5
toggleStroke.Parent = toggleButton

local toggleRainbow = Instance.new("UIGradient")
toggleRainbow.Color = rainbowColors
toggleRainbow.Rotation = 90
toggleRainbow.Parent = toggleStroke

local toggleRainbowTween = TweenService:Create(toggleRainbow, TweenInfo.new(4, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, -1), 
    {Rotation = 450})
toggleRainbowTween:Play()

-- 其他选项按钮
local optionsButton = Instance.new("TextButton")
optionsButton.Name = "OptionsButton"
optionsButton.Size = UDim2.new(0.35, 0, 0, 25)
optionsButton.Position = UDim2.new(0.1, 0, 0.55, 0)
optionsButton.BackgroundColor3 = Color3.fromRGB(60, 60, 70)
optionsButton.Text = "其他选项"
optionsButton.TextColor3 = Color3.fromRGB(200, 200, 255)
optionsButton.TextSize = 12
optionsButton.Font = Enum.Font.Gotham
optionsButton.ZIndex = 1000
optionsButton.Parent = mainFrame

local optionsCorner = Instance.new("UICorner")
optionsCorner.CornerRadius = UDim.new(0, 5)
optionsCorner.Parent = optionsButton

-- 添加彩色边框
local optionsStroke = Instance.new("UIStroke")
optionsStroke.Color = Color3.fromRGB(255, 255, 255)
optionsStroke.Thickness = 1.5
optionsStroke.Parent = optionsButton

local optionsRainbow = Instance.new("UIGradient")
optionsRainbow.Color = rainbowColors
optionsRainbow.Rotation = 180
optionsRainbow.Parent = optionsStroke

local optionsRainbowTween = TweenService:Create(optionsRainbow, TweenInfo.new(4, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, -1), 
    {Rotation = 540})
optionsRainbowTween:Play()

-- 状态显示
local statusText = Instance.new("TextLabel")
statusText.Name = "StatusText"
statusText.Size = UDim2.new(0.8, 0, 0, 20)
statusText.Position = UDim2.new(0.1, 0, 0.65, 0)
statusText.BackgroundTransparency = 1
statusText.Text = "当前状态: 待机"
statusText.TextColor3 = Color3.fromRGB(255, 255, 255)
statusText.TextSize = 12
statusText.Font = Enum.Font.Gotham
statusText.ZIndex = 1000
statusText.Parent = mainFrame

-- 统计显示
local statsText = Instance.new("TextLabel")
statsText.Name = "StatsText"
statsText.Size = UDim2.new(0.8, 0, 0, 20)
statsText.Position = UDim2.new(0.1, 0, 0.72, 0)
statsText.BackgroundTransparency = 1
statsText.Text = "已翻译: 0 | 缓存: 0 | 速度: 0/s"
statsText.TextColor3 = Color3.fromRGB(200, 200, 255)
statsText.TextSize = 11
statsText.Font = Enum.Font.Gotham
statsText.ZIndex = 1000
statsText.Parent = mainFrame

-- 详情显示
local detailText = Instance.new("TextLabel")
detailText.Name = "DetailText"
detailText.Size = UDim2.new(0.8, 0, 0, 50)
detailText.Position = UDim2.new(0.1, 0, 0.8, 0)
detailText.BackgroundTransparency = 1
detailText.Text = "最近翻译: 无"
detailText.TextColor3 = Color3.fromRGB(180, 220, 180)
detailText.TextSize = 10
detailText.Font = Enum.Font.Gotham
detailText.TextWrapped = true
detailText.ZIndex = 1000
detailText.Parent = mainFrame

-- 关闭按钮
local closeButton = Instance.new("TextButton")
closeButton.Name = "CloseButton"
closeButton.Size = UDim2.new(0, 25, 0, 25)
closeButton.Position = UDim2.new(1, -30, 0, 5)
closeButton.BackgroundColor3 = Color3.fromRGB(40, 40, 45)
closeButton.Text = "×"
closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
closeButton.TextSize = 18
closeButton.Font = Enum.Font.GothamBold
closeButton.ZIndex = 1001
closeButton.Parent = mainFrame

local closeCorner = Instance.new("UICorner")
closeCorner.CornerRadius = UDim.new(0, 12)
closeCorner.Parent = closeButton

-- 添加彩色边框
local closeStroke = Instance.new("UIStroke")
closeStroke.Color = Color3.fromRGB(255, 255, 255)
closeStroke.Thickness = 1.5
closeStroke.Parent = closeButton

local closeRainbow = Instance.new("UIGradient")
closeRainbow.Color = rainbowColors
closeRainbow.Rotation = 270
closeRainbow.Parent = closeStroke

local closeRainbowTween = TweenService:Create(closeRainbow, TweenInfo.new(4, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, -1), 
    {Rotation = 630})
closeRainbowTween:Play()

-- 其他选项窗口
local optionsFrame = Instance.new("Frame")
optionsFrame.Name = "OptionsFrame"
optionsFrame.Size = UDim2.new(0, 350, 0, 200)
optionsFrame.Position = UDim2.new(0.5, -175, 0.5, -100)
optionsFrame.BackgroundColor3 = Color3.fromRGB(35, 35, 40)
optionsFrame.BorderSizePixel = 0
optionsFrame.Visible = false
optionsFrame.ZIndex = 1002
optionsFrame.Parent = screenGui

local optionsCorner = Instance.new("UICorner")
optionsCorner.CornerRadius = UDim.new(0, 12)
optionsCorner.Parent = optionsFrame

-- 其他选项彩色边框实现
local optionsFrameStroke = Instance.new("UIStroke")
optionsFrameStroke.Color = Color3.fromRGB(255, 255, 255)
optionsFrameStroke.Thickness = 1.5
optionsFrameStroke.Parent = optionsFrame

local optionsFrameRainbow = Instance.new("UIGradient")
optionsFrameRainbow.Color = rainbowColors
optionsFrameRainbow.Rotation = 0
optionsFrameRainbow.Parent = optionsFrameStroke

local optionsFrameRainbowTween = TweenService:Create(optionsFrameRainbow, TweenInfo.new(4, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, -1), 
    {Rotation = 360})
optionsFrameRainbowTween:Play()

-- 其他选项内容
local optionsTitle = Instance.new("TextLabel")
optionsTitle.Name = "OptionsTitle"
optionsTitle.Size = UDim2.new(1, 0, 0, 30)
optionsTitle.Position = UDim2.new(0, 0, 0, 0)
optionsTitle.BackgroundColor3 = Color3.fromRGB(40, 40, 45)
optionsTitle.Text = "其他选项设置"
optionsTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
optionsTitle.TextSize = 16
optionsTitle.Font = Enum.Font.GothamBold
optionsTitle.ZIndex = 1003
optionsTitle.Parent = optionsFrame

-- 其他选项标题彩色边框
local optionsTitleStroke = Instance.new("UIStroke")
optionsTitleStroke.Color = Color3.fromRGB(255, 255, 255)
optionsTitleStroke.Thickness = 1.5
optionsTitleStroke.Parent = optionsTitle

local optionsTitleRainbow = Instance.new("UIGradient")
optionsTitleRainbow.Color = rainbowColors
optionsTitleRainbow.Rotation = 180
optionsTitleRainbow.Parent = optionsTitleStroke

local optionsTitleRainbowTween = TweenService:Create(optionsTitleRainbow, TweenInfo.new(4, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, -1), 
    {Rotation = 540})
optionsTitleRainbowTween:Play()

-- 缓存开关
local cacheToggle = Instance.new("TextButton")
cacheToggle.Name = "CacheToggle"
cacheToggle.Size = UDim2.new(0.8, 0, 0, 25)
cacheToggle.Position = UDim2.new(0.1, 0, 0.2, 0)
cacheToggle.BackgroundColor3 = Color3.fromRGB(100, 200, 100)
cacheToggle.Text = "启用缓存: 是"
cacheToggle.TextColor3 = Color3.fromRGB(255, 255, 255)
cacheToggle.TextSize = 12
cacheToggle.Font = Enum.Font.Gotham
cacheToggle.ZIndex = 1003
cacheToggle.Parent = optionsFrame

local cacheCorner = Instance.new("UICorner")
cacheCorner.CornerRadius = UDim.new(0, 5)
cacheCorner.Parent = cacheToggle

-- 添加彩色边框
local cacheStroke = Instance.new("UIStroke")
cacheStroke.Color = Color3.fromRGB(255, 255, 255)
cacheStroke.Thickness = 1.5
cacheStroke.Parent = cacheToggle

local cacheRainbow = Instance.new("UIGradient")
cacheRainbow.Color = rainbowColors
cacheRainbow.Rotation = 90
cacheRainbow.Parent = cacheStroke

local cacheRainbowTween = TweenService:Create(cacheRainbow, TweenInfo.new(4, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, -1), 
    {Rotation = 450})
cacheRainbowTween:Play()

local cacheEnabled = true

cacheToggle.MouseButton1Click:Connect(function()
    cacheEnabled = not cacheEnabled
    cacheToggle.BackgroundColor3 = cacheEnabled and Color3.fromRGB(100, 200, 100) or Color3.fromRGB(200, 100, 100)
    cacheToggle.Text = "启用缓存: " .. (cacheEnabled and "是" or "否")
    if not cacheEnabled then
        translationCache = {}
        statsText.Text = statsText.Text:gsub("缓存: %d+", "缓存: 0")
    end
end)

-- 速度滑块
local speedSlider = Instance.new("Frame")
speedSlider.Name = "SpeedSlider"
speedSlider.Size = UDim2.new(0.8, 0, 0, 50)
speedSlider.Position = UDim2.new(0.1, 0, 0.4, 0)
speedSlider.BackgroundTransparency = 1
speedSlider.Parent = optionsFrame

local speedLabel = Instance.new("TextLabel")
speedLabel.Name = "SpeedLabel"
speedLabel.Size = UDim2.new(1, 0, 0, 20)
speedLabel.Position = UDim2.new(0, 0, 0, 0)
speedLabel.BackgroundTransparency = 1
speedLabel.Text = "扫描速度: 标准"
speedLabel.TextColor3 = Color3.fromRGB(200, 200, 255)
speedLabel.TextSize = 12
speedLabel.Font = Enum.Font.Gotham
speedLabel.TextXAlignment = Enum.TextXAlignment.Left
speedLabel.Parent = speedSlider

local speedBar = Instance.new("Frame")
speedBar.Name = "SpeedBar"
speedBar.Size = UDim2.new(1, 0, 0, 5)
speedBar.Position = UDim2.new(0, 0, 0.6, 0)
speedBar.BackgroundColor3 = Color3.fromRGB(60, 60, 70)
speedBar.Parent = speedSlider

local speedBarCorner = Instance.new("UICorner")
speedBarCorner.CornerRadius = UDim.new(0, 3)
speedBarCorner.Parent = speedBar

local speedFill = Instance.new("Frame")
speedFill.Name = "SpeedFill"
speedFill.Size = UDim2.new(0.5, 0, 1, 0)
speedFill.BackgroundColor3 = Color3.fromRGB(100, 200, 255)
speedFill.Parent = speedBar

local speedFillCorner = Instance.new("UICorner")
speedFillCorner.CornerRadius = UDim.new(0, 3)
speedFillCorner.Parent = speedFill

local speedHandle = Instance.new("TextButton")
speedHandle.Name = "SpeedHandle"
speedHandle.Size = UDim2.new(0, 15, 0, 15)
speedHandle.Position = UDim2.new(0.5, -7.5, 0.6, -5)
speedHandle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
speedHandle.Text = ""
speedHandle.ZIndex = 1004
speedHandle.Parent = speedSlider

local speedHandleCorner = Instance.new("UICorner")
speedHandleCorner.CornerRadius = UDim.new(0, 7)
speedHandleCorner.Parent = speedHandle

-- 添加彩色边框
local speedHandleStroke = Instance.new("UIStroke")
speedHandleStroke.Color = Color3.fromRGB(255, 255, 255)
speedHandleStroke.Thickness = 1.5
speedHandleStroke.Parent = speedHandle

local speedHandleRainbow = Instance.new("UIGradient")
speedHandleRainbow.Color = rainbowColors
speedHandleRainbow.Rotation = 180
speedHandleRainbow.Parent = speedHandleStroke

local speedHandleRainbowTween = TweenService:Create(speedHandleRainbow, TweenInfo.new(4, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, -1), 
    {Rotation = 540})
speedHandleRainbowTween:Play()

local speedValues = {"慢", "标准", "快"}
local currentSpeed = 2
local scanCooldowns = {0.5, 0.3, 0.1}
local scanCooldown = scanCooldowns[currentSpeed]

-- 速度滑块逻辑
local function updateSpeed(value)
    currentSpeed = math.clamp(math.round(value * 2) + 1, 1, 3)
    speedFill.Size = UDim2.new(currentSpeed/3, 0, 1, 0)
    speedHandle.Position = UDim2.new(currentSpeed/3, -7.5, 0.6, -5)
    speedLabel.Text = "速度: " .. speedValues[currentSpeed]
    scanCooldown = scanCooldowns[currentSpeed]
end

speedHandle.MouseButton1Down:Connect(function()
    local connection
    local startPos = speedHandle.AbsolutePosition.X
    local barSize = speedBar.AbsoluteSize.X
    
    connection = UserInputService.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            local mousePos = input.Position.X
            local relative = (mousePos - speedBar.AbsolutePosition.X) / barSize
            updateSpeed(relative)
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            connection:Disconnect()
        end
    end)
end)

-- 关闭选项按钮
local closeOptionsButton = Instance.new("TextButton")
closeOptionsButton.Name = "CloseOptionsButton"
closeOptionsButton.Size = UDim2.new(0.6, 0, 0, 30)
closeOptionsButton.Position = UDim2.new(0.2, 0, 0.8, 0)
closeOptionsButton.BackgroundColor3 = Color3.fromRGB(60, 60, 70)
closeOptionsButton.Text = "保存设置"
closeOptionsButton.TextColor3 = Color3.fromRGB(255, 255, 255)
closeOptionsButton.TextSize = 14
closeOptionsButton.Font = Enum.Font.Gotham
closeOptionsButton.ZIndex = 1003
closeOptionsButton.Parent = optionsFrame

local closeOptionsCorner = Instance.new("UICorner")
closeOptionsCorner.CornerRadius = UDim.new(0, 5)
closeOptionsCorner.Parent = closeOptionsButton

-- 添加彩色边框
local closeOptionsStroke = Instance.new("UIStroke")
closeOptionsStroke.Color = Color3.fromRGB(255, 255, 255)
closeOptionsStroke.Thickness = 1.5
closeOptionsStroke.Parent = closeOptionsButton

local closeOptionsRainbow = Instance.new("UIGradient")
closeOptionsRainbow.Color = rainbowColors
closeOptionsRainbow.Rotation = 270
closeOptionsRainbow.Parent = closeOptionsStroke

local closeOptionsRainbowTween = TweenService:Create(closeOptionsRainbow, TweenInfo.new(4, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, -1), 
    {Rotation = 630})
closeOptionsRainbowTween:Play()

-- 其他选项关闭按钮
local optionsCloseButton = Instance.new("TextButton")
optionsCloseButton.Name = "OptionsCloseButton"
optionsCloseButton.Size = UDim2.new(0, 25, 0, 25)
optionsCloseButton.Position = UDim2.new(1, -30, 0, 5)
optionsCloseButton.BackgroundColor3 = Color3.fromRGB(40, 40, 45)
optionsCloseButton.Text = "×"
optionsCloseButton.TextColor3 = Color3.fromRGB(255, 255, 255)
optionsCloseButton.TextSize = 18
optionsCloseButton.Font = Enum.Font.GothamBold
optionsCloseButton.ZIndex = 1004
optionsCloseButton.Parent = optionsFrame

local optionsCloseCorner = Instance.new("UICorner")
optionsCloseCorner.CornerRadius = UDim.new(0, 12)
optionsCloseCorner.Parent = optionsCloseButton

-- 添加彩色边框
local optionsCloseStroke = Instance.new("UIStroke")
optionsCloseStroke.Color = Color3.fromRGB(255, 255, 255)
optionsCloseStroke.Thickness = 1.5
optionsCloseStroke.Parent = optionsCloseButton

local optionsCloseRainbow = Instance.new("UIGradient")
optionsCloseRainbow.Color = rainbowColors
optionsCloseRainbow.Rotation = 270
optionsCloseRainbow.Parent = optionsCloseStroke

local optionsCloseRainbowTween = TweenService:Create(optionsCloseRainbow, TweenInfo.new(4, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, -1), 
    {Rotation = 630})
optionsCloseRainbowTween:Play()

-- 翻译功能实现
local phraseDictionary = {
    --["Information"] = "信息",
    ["Misc"] = "杂项",
    ["After turning it off make sure to visit the campfire to restart the real time lighting"] = "关闭后，请务必访问营火重新启动实时照明",
    ["Always Day Light"] = "始日白昼",
}

-- 创建翻译缓存
local translationCache = {}
local cacheHits = 0
local totalRequests = 0

-- 翻译函数
local function translatePhrase(text)
    if not text or text == "" or type(text) ~= "string" then
        return text, false
    end

    totalRequests = totalRequests + 1
    
    -- 检查缓存
    if cacheEnabled and translationCache[text] then
        cacheHits = cacheHits + 1
        return translationCache[text], true
    end

    local translated = text
    local anyReplaced = false
    
    -- 根据当前模式选择翻译方式
    if currentMode == 1 then
        -- 仅完全匹配
        if phraseDictionary[text] then
            translated = phraseDictionary[text]
            anyReplaced = true
        end
    elseif currentMode == 2 then
        -- 尝试完全匹配
        if phraseDictionary[text] then
            translated = phraseDictionary[text]
            anyReplaced = true
        else
            -- 尝试单词替换
            local words = {}
            for word in text:gmatch("%S+") do
                table.insert(words, phraseDictionary[word] or word)
            end
            local newText = table.concat(words, " ")
            if newText ~= text then
                translated = newText
                anyReplaced = true
            end
        end
    elseif currentMode == 3 then
        -- 尝试完全匹配
        if phraseDictionary[text] then
            translated = phraseDictionary[text]
            anyReplaced = true
        else
            -- 尝试句子替换
            local sortedKeys = {}
            for k in pairs(phraseDictionary) do
                table.insert(sortedKeys, k)
            end
            table.sort(sortedKeys, function(a, b)
                return #a > #b
            end)

            for _, eng in ipairs(sortedKeys) do
                local pattern = "%f[%w]" .. eng:gsub("%%", "%%%%"):gsub("([%^%$%(%)%%%.%[%]%*%+%-%?])", "%%%1") .. "%f[%W]"
                local chi = phraseDictionary[eng]
                local newTranslated, count = translated:gsub(pattern, chi)
                if count > 0 then
                    translated = newTranslated
                    anyReplaced = true
                end
            end
        end
    end

    -- 更新缓存
    if cacheEnabled and anyReplaced then
        translationCache[text] = translated
    end

    return translated, anyReplaced
end

-- 设置文本函数
local function safeSetText(element, text)
    if element and element.Parent then
        pcall(function()
            element.Text = text
        end)
    end
end

-- 翻译状态
local isAutoTranslating = false
local totalTranslated = 0
local lastScanTime = 0
local scanCooldown = 0.3
local lastTranslatedPhrase = "无"
local processedElements = {}
local translationSpeed = 0
local lastSpeedUpdate = 0
local lastTranslationCount = 0

-- 主翻译函数
local function performPhraseTranslation()
    if not isAutoTranslating then
        return 0
    end

    local currentTime = tick()
    if currentTime - lastScanTime < scanCooldown then
        return 0
    end
    
    -- 统计
    if currentTime - lastSpeedUpdate >= 1 then
        translationSpeed = totalTranslated - lastTranslationCount
        lastTranslationCount = totalTranslated
        lastSpeedUpdate = currentTime
        statsText.Text = string.format("已翻译: %d | 缓存: %d | 速度: %d/s", 
            totalTranslated, cacheHits, translationSpeed)
    end

    lastScanTime = currentTime
    local translatedCount = 0
    local foundElements = {}

    -- 收集UI
    local function collectElements(parent)
        for _, child in ipairs(parent:GetChildren()) do
            if child:IsA("TextLabel") or child:IsA("TextButton") or child:IsA("TextBox") then
                if not processedElements[child] then
                    table.insert(foundElements, child)
                end
            end
            collectElements(child)
        end
    end

    -- 从UI开始
    collectElements(playerGui)
    collectElements(CoreGui)

    -- 翻译找UI
    for _, element in ipairs(foundElements) do
        if isAutoTranslating and element.Parent then
            local success, translatedText = pcall(function()
                local originalText = element.Text
                if originalText and originalText ~= "" then
                    local translated, wasTranslated = translatePhrase(originalText)
                    if wasTranslated and translated ~= originalText then
                        safeSetText(element, translated)
                        processedElements[element] = true
                        lastTranslatedPhrase = originalText .. " → " .. translated
                        detailText.Text = "最近翻译: " .. (lastTranslatedPhrase:sub(1, 50) .. ( #lastTranslatedPhrase > 50 and "..." or "" ))
                        return true
                    end
                end
                return false
            end)
            if success and translatedText then
                translatedCount = translatedCount + 1
            end
        end
    end

    totalTranslated = totalTranslated + translatedCount
    return translatedCount
end

-- 自动翻译
local function startAutoTranslation()
    if isAutoTranslating then
        return
    end
    isAutoTranslating = true
    toggleButton.BackgroundColor3 = Color3.fromRGB(220, 20, 60) -- 红色表示激活
    toggleButton.Text = "停止翻译"
    statusText.Text = "当前状态: 翻译中..."
    totalTranslated = 0
    lastTranslationCount = 0
    translationSpeed = 0
    processedElements = {}
    statsText.Text = "已翻译: 0 | 缓存: 0 | 速度: 0/s"
    detailText.Text = "最近翻译: 无"

    -- 使用RunService来定期执行翻译
    local connection
    connection = RunService.Heartbeat:Connect(function()
        if not isAutoTranslating then
            connection:Disconnect()
            return
        end
        performPhraseTranslation()
    end)
end

local function stopAutoTranslation()
    isAutoTranslating = false
    toggleButton.BackgroundColor3 = Color3.fromRGB(60, 60, 70)
    toggleButton.Text= "开始翻译"
    statusText.Text = "当前状态: 已停止"
end

-- UI函数
local function toggleUI()
    mainFrame.Visible = not mainFrame.Visible
end

-- 主UI拖拽
local mainFrameDragging = false
local mainFrameDragStartPos
local mainFrameStartPos

title.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        mainFrameDragging = true
        mainFrameDragStartPos = input.Position
        mainFrameStartPos = mainFrame.Position
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                mainFrameDragging = false
            end
        end)
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if mainFrameDragging and input.UserInputType == Enum.UserInputType.MouseMovement then
        local delta = input.Position - mainFrameDragStartPos
        mainFrame.Position = UDim2.new(0, mainFrameStartPos.X.Offset + delta.X, 0, mainFrameStartPos.Y.Offset + delta.Y)
    end
end)

-- 控制按钮
local controlButtonDragging = false
local controlButtonDragStartPos
local controlButtonStartPos

controlButton.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        controlButtonDragging = true
        controlButtonDragStartPos = input.Position
        controlButtonStartPos = controlButton.Position
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                controlButtonDragging = false
            end
        end)
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if controlButtonDragging and input.UserInputType == Enum.UserInputType.MouseMovement then
        local delta = input.Position - controlButtonDragStartPos
        controlButton.Position = UDim2.new(0, controlButtonStartPos.X.Offset + delta.X, 0, controlButtonStartPos.Y.Offset + delta.Y)
        if mainFrame.Visible then
            mainFrame.Position = UDim2.new(0, controlButtonStartPos.X.Offset + delta.X + 70, 0, controlButtonStartPos.Y.Offset + delta.Y)
        end
    end
end)

-- UI拖拽
local optionsFrameDragging = false
local optionsFrameDragStartPos
local optionsFrameStartPos

optionsTitle.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        optionsFrameDragging = true
        optionsFrameDragStartPos = input.Position
        optionsFrameStartPos = optionsFrame.Position
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                optionsFrameDragging = false
            end
        end)
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if optionsFrameDragging and input.UserInputType == Enum.UserInputType.MouseMovement then
        local delta = input.Position - optionsFrameDragStartPos
        optionsFrame.Position = UDim2.new(0, optionsFrameStartPos.X.Offset + delta.X, 0, optionsFrameStartPos.Y.Offset + delta.Y)
    end
end)

-- 按钮点击
controlButton.MouseButton1Click:Connect(toggleUI)
toggleButton.MouseButton1Click:Connect(function()
    if isAutoTranslating then
        stopAutoTranslation()
    else
        startAutoTranslation()
    end
end)

optionsButton.MouseButton1Click:Connect(function()
    optionsFrame.Visible = true
end)

closeButton.MouseButton1Click:Connect(function()
    mainFrame.Visible = false
end)

closeOptionsButton.MouseButton1Click:Connect(function()
    optionsFrame.Visible = false
end)

optionsCloseButton.MouseButton1Click:Connect(function()
    optionsFrame.Visible = false
end)

-- 初始化
local function initialize()
    print("========================================")
    print("WU SCRIPT界面汉化工具")
    print("联系作者添加翻译模版")
    print("当前模式: "..modes[currentMode][1])
    print("========================================")
    
    -- 初始提示
    delay(2, function()
        print("提示: 点击执行翻译即可")
    end)
end

initialize()
